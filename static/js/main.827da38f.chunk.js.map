{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","reportWebVitals.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","country","console","log","value","active","cardDetails","style","styles","infected","text","bottomText","className","container","Grid","spacing","justify","map","detail","index","item","component","Card","xs","md","cx","margin","padding","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toLocaleDateString","url","fetchData","a","changeableUrl","axios","get","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","hoverBackgroundColor","options","legend","display","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.827da38f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2rsBB\",\"card\":\"Cards_card__2c3l1\",\"infected\":\"Cards_infected__3VlEV\",\"recovered\":\"Cards_recovered__19HRB\",\"deaths\":\"Cards_deaths__2RJVi\",\"active\":\"Cards_active__3FgkY\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({\r\n    data: { confirmed, recovered, deaths, lastUpdate},\r\n    country,\r\n}) => {\r\n    if(!confirmed) {\r\n        return \"Loading...\";\r\n    }\r\n    console.log(`Confirmed: ${confirmed.value}, Recovered: ${recovered}, ${deaths.value}`);\r\n    const active = confirmed.value - recovered.value - deaths.value;\r\n    let cardDetails = [\r\n        {\r\n            style: styles.infected,\r\n            text: \"Infected\",\r\n            value: confirmed.value,\r\n            bottomText: \"Number of infect cases of COVID-19\",\r\n        },\r\n        {\r\n            style: styles.recovered,\r\n            text: \"Recovered\",\r\n            value: recovered.value,\r\n            bottomText: \"Number of recoveries from COVID-19\",\r\n        },\r\n        {\r\n            style: styles.active,\r\n            text: \"Active\",\r\n            value: active,\r\n            bottomText: \"Number of active cases of COVID-19\",\r\n        },\r\n    ];\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                {cardDetails.map((detail, index) => (\r\n                    <Grid\r\n                        item\r\n                        component = {Card}\r\n                        xs={12}\r\n                        md={2}\r\n                        className={cx(styles.Card, detail.style)}\r\n                        key={index}\r\n                        style={{ margin: \"0px 23.675px\", padding: \"12px\"}}    \r\n                    >\r\n                        <CardContent>\r\n                            <Typography color=\"textPrimary\" gutterBottom>\r\n                                <b>{detail.text}</b>\r\n                            </Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={detail.value}\r\n                                    duration={2}\r\n                                    separator=\",\"\r\n                                >\r\n                                </CountUp>\r\n                            </Typography>\r\n                            <Typography color=\"textPrimary\">Last Updated at: </Typography>\r\n                            <Typography color=\"textPrimary\" variant=\"body2\">\r\n                                {new Date(lastUpdate).toLocaleDateString()}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\">{detail.bottomText}</Typography>\r\n                            <Typography color=\"textPrimary\">{country}</Typography>\r\n                        </CardContent>\r\n\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const {\r\n            data: {confirmed, recovered, deaths, lastUpdate},\r\n        } = await axios.get(changeableUrl);\r\n\r\n        return {\r\n            confirmed, recovered, deaths, lastUpdate,\r\n        };\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map( (dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (err) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {\r\n            data: {countries},\r\n        } = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport {fetchDailyData} from \"../../api\";\r\nimport {Line, Bar} from \"react-chartjs-2\";\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = dailyData.length ? (\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [\r\n                    {\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: \"Infected\",\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({deaths}) => deaths),\r\n                        label:\"Deaths\",\r\n                        borderColor: \"red\",\r\n                        backgroundColor: \"rgba(255,0,0,0.5)\",\r\n                        fill: true\r\n                    }\r\n                    \r\n                ]\r\n            }}\r\n        />\r\n    ) : null;\r\n\r\n    const barChart = confirmed ? (\r\n        <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\", \"Active\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n              \"rgba(242, 234, 0, 0.5)\",\r\n            ],\r\n            hoverBackgroundColor: [\r\n              \"rgba(0, 77, 153)\",\r\n              \"rgba(30, 102, 49)\",\r\n              \"rgba(255, 51, 51)\",\r\n              \"rgba(204, 153, 0)\",\r\n            ],\r\n            data: [\r\n              confirmed.value,\r\n              recovered.value,\r\n              deaths.value,\r\n              confirmed.value - (recovered.value + deaths.value),\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n    ) : null;\r\n\r\n    return (\r\n        <div className={styles.container}> {country ? barChart : lineChart} </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, {useState, useEffect} from \"react\";\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect (() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        };\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect\r\n                defaultValue=\"\"\r\n                onChange={(e) => handleCountryChange(e.target.value)}\r\n            >\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,key) => (\r\n                    <option key={key} value={country}>\r\n                        {country}\r\n                    </option>\r\n                ))}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\nimport { Cards, Chart, CountryPicker } from \"./Components\";\nimport styles from \"./App.module.css\";\nimport {fetchData} from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: \"\"\n    };\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({ data: fetchedData });\n    }\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({data: fetchedData, country: country});\n    };\n    render() {\n        const {data, country} = this.state;\n        return(\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n                <br/>\n                <text>\n                    <b>Global and Country Wise Cases of Corona Virus</b>\n                </text>\n                <text>\n                    <i>(For a particular select a Country from below)</i>\n                </text>\n                <br/>\n                <br/>\n                \n                <Cards data={data} country={country}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2JoMX\",\"image\":\"App_image__FbRAa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3Guow\",\"image\":\"Chart_image__1GbS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1Hl6_\"};"],"sourceRoot":""}